<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Anatolii Platonov</title><link>http://platonoff-dev.com/</link><description>Recent content on Anatolii Platonov</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sat, 05 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://platonoff-dev.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Tests driven tests in go</title><link>http://platonoff-dev.com/test_driven_tests/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>http://platonoff-dev.com/test_driven_tests/</guid><description>This trick is very useful if you are using TDD. From time to time there is a lot of duplication in our tests. For each test case only the input, the expected output, and name of test case change. Everything else is boilerplate. What wes&amp;rsquo;d like to set up all the inputs and expected outputs and feel them to a single test harness.
func TestSomething(t *testing.T) { tests := []struct{ input interface{} expected interface{} name string }{ // Your test cases here } for _, tc := range tests { t.</description></item><item><title>Clean code naming principles</title><link>http://platonoff-dev.com/naming_principles/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>http://platonoff-dev.com/naming_principles/</guid><description>Use Intention-Revealing names. Name of variable, function, class, &amp;hellip; should tell you why it exists, what it does, and how it used. If a name requires a comment, then the name does not reveal its intent. Bad example:
int d; // elapsed time in days Good example:
int elapsedTimeInDays; Avoid disinformation You should avoid words whose entrenched meanings vary from our intended meaning. Spelling similar concepts similarly is information.</description></item><item><title>HTTP Basic Auth</title><link>http://platonoff-dev.com/basic_auth/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>http://platonoff-dev.com/basic_auth/</guid><description>HTTP Basic Auth - штука которая существует давно (RFC 2617) c 1999 года и в современном виде (RFC 7617) c 2015 года, но с которой мне пришлось повозиться только теперь.
В контексте HTTP запроса это способ для HTTP клиента (браузера) передавать логин и пароль серверу. Для этих целей используется хедер Authorization: Basic &amp;lt;credentials&amp;gt;, где данные - зашифрованные в Base64 логин и пароль, разделенные :
Это самый простейший способ авторизации не требующий кук, сессий и страниц авторизации.</description></item><item><title/><link>http://platonoff-dev.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://platonoff-dev.com/about/</guid><description/></item><item><title/><link>http://platonoff-dev.com/posts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://platonoff-dev.com/posts/</guid><description/></item></channel></rss>